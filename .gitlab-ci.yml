image: alpine:latest

cache:
  paths:
    - node_modules/

stages:
  - build
  - test
  - Docker Image Build
  - deploy

# GitLab-CI Security Scans
include:
  - template: SAST.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml

sast:
  rules:
    - when: on_success
  variables:
    SAST_EXCLUDED_PATHS: node_modules
  needs: []

license_scanning:
  rules:
    - when: on_success
  needs: []

container_scanning:
  rules:
    - when: on_success
  needs: ["Container Scan Docker"]

dependency_scanning:
  dependencies:
    - Install Node Dependencies
  rules:
    - when: on_success
  needs: ["Install Node Dependencies"]

eslint-sast:
  rules:
    - when: on_success
  needs: []

gemnasium-dependency_scanning:
  rules:
    - when: on_success
  needs: []

nodejs-scan-sast:
  rules:
    - when: on_success
  needs: []    

retire-js-dependency_scanning:
  rules:
    - when: on_success
  needs: []

secrets-sast:
  rules:
    - when: on_success
  needs: []

# Workflow Default Settings
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

Install BuildX:
  image: docker:git
  stage: build
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - buildx
    expire_in: 6h
  services:
    - docker:dind
  script:
    - export DOCKER_BUILDKIT=1
    - git clone git://github.com/docker/buildx ./docker-buildx
    - docker build --platform=local -o . ./docker-buildx


# Node.JS Testing
Install Node Dependencies:
  image: node:alpine
  stage: build
  script: npm i
  artifacts:
    paths:
      - node_modules
    expire_in: 1h

# Build docker containers
.install_buildx: &installbuildx
  # Official docker image.
  image: docker:latest
  dependencies:
    - Install Node Dependencies
    - Install BuildX
  services:
    - name: docker:dind
      command: ["--experimental"]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use --driver docker-container --name mybuilder
    - docker buildx inspect --bootstrap

.gen_docker_images_master: &gendockerimagesmaster
  <<: *installbuildx
  stage: Docker Image Build
  script:
    - docker buildx build --platform $PLATFORMS --progress=plain --push -t $IMAGE_TAG .
  needs: ["Install Node Dependencies", "Install BuildX"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: always
    - when: never

.gen_docker_images_tags: &gendockerimagestags
  <<: *installbuildx
  stage: Docker Image Build
  script:
    - docker buildx build --platform $PLATFORMS --progress=plain --push -t $IMAGE_TAG .
  needs: ["Install Node Dependencies", "Install BuildX"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: never
    - if: '$CI_COMMIT_TAG != null'
      when: always
    - when: never

Build ARMv6 Docker Image Master:
  <<: *gendockerimagesmaster
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:armv6
    PLATFORMS: linux/arm/v6
  timeout: 3h

Build ARMv7a Docker Image Master:
  <<: *gendockerimagesmaster
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:armv7a
    PLATFORMS: linux/arm/v7
  timeout: 3h

Build ARM64 Docker Image Master:
  <<: *gendockerimagesmaster
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:arm64
    PLATFORMS: linux/arm64

Build x86 Docker Image Master:
  <<: *gendockerimagesmaster
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:x86
    PLATFORMS: linux/386

Build x86_64 Docker Image Master:
  <<: *gendockerimagesmaster
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:x64
    PLATFORMS: linux/amd64

Docker Merge Manifest Master:
  <<: *installbuildx
  stage: deploy
  dependencies:
    - Install Node Dependencies
    - Install BuildX
    - Build ARMv6 Docker Image Master
    - Build ARMv7a Docker Image Master
    - Build ARM64 Docker Image Master
    - Build x86 Docker Image Master
    - Build x86_64 Docker Image Master
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE
  script:
    - docker buildx imagetools create -t $IMAGE_TAG $IMAGE_TAG:x64 $IMAGE_TAG:x86 $IMAGE_TAG:arm64 $IMAGE_TAG:armv7a $IMAGE_TAG:armv6
    - docker buildx imagetools inspect $IMAGE_TAG
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: always
    - when: never

Build Docker:
  # Official docker image.
  image: docker:latest
  stage: deploy
  dependencies:
    - Install Node Dependencies
  services:
    - name: docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: never
    - when: always

Build ARMv6 Docker Image Tagged:
  <<: *gendockerimagestags
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/releases:$CI_COMMIT_REF_SLUG-armv6
    PLATFORMS: linux/arm/v6
  timeout: 3h

Build ARMv7a Docker Image Tagged:
  <<: *gendockerimagestags
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/releases:$CI_COMMIT_REF_SLUG-armv7a
    PLATFORMS: linux/arm/v7
  timeout: 3h

Build ARM64 Docker Image Tagged:
  <<: *gendockerimagestags
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/releases:$CI_COMMIT_REF_SLUG-arm64
    PLATFORMS: linux/arm64

Build x86 Docker Image Tagged:
  <<: *gendockerimagestags
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/releases:$CI_COMMIT_REF_SLUG-x86
    PLATFORMS: linux/386

Build x86_64 Docker Image Tagged:
  <<: *gendockerimagestags
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/releases:$CI_COMMIT_REF_SLUG-x64
    PLATFORMS: linux/amd64

Docker Merge Manifest Tagged:
  <<: *installbuildx
  stage: deploy
  dependencies:
    - Install Node Dependencies
    - Install BuildX
    - Build ARMv6 Docker Image Tagged
    - Build ARMv7a Docker Image Tagged
    - Build ARM64 Docker Image Tagged
    - Build x86 Docker Image Tagged
    - Build x86_64 Docker Image Tagged
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/releases:$CI_COMMIT_REF_SLUG
  script:
    - docker buildx imagetools create -t $IMAGE_TAG $IMAGE_TAG-x64 $IMAGE_TAG-x86 $IMAGE_TAG-arm64 $IMAGE_TAG-armv7a $IMAGE_TAG-armv6
    - docker buildx imagetools inspect $IMAGE_TAG
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: never
    - if: '$CI_COMMIT_TAG != null'
      when: always
    - when: never

Container Scan Docker:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

# Cleaning up to make the container registry neater    
Cleanup Container Scan Docker Image:
  image: docker:latest
  stage: deploy
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    REG_SHA256: ade837fc5224acd8c34732bf54a94f579b47851cc6a7fd5899a98386b782e228
    REG_VERSION: 0.16.1
  before_script:
    - apk add --no-cache curl
    - curl --fail --show-error --location "https://github.com/genuinetools/reg/releases/download/v$REG_VERSION/reg-linux-amd64" --output /usr/local/bin/reg
    - echo "$REG_SHA256  /usr/local/bin/reg" | sha256sum -c -
    - chmod a+x /usr/local/bin/reg
  script:
    - /usr/local/bin/reg rm -d --auth-url $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $IMAGE_TAG || true
  needs: ["container_scanning"]

# Deploy to heroku manually
Deploy to Heroku Prod:
  image: ruby:alpine
  stage: deploy
  dependencies:
    - Install Node Dependencies
  variables:
    MY_APP: ccn-covid19-sg-dashboard
  before_script:
    - apk add git curl
    - gem install dpl
    - echo "Deploying to Heroku"
    - echo $CI_COMMIT_SHORT_SHA > COMMITSHA
  script: dpl --provider=heroku --app=$MY_APP --api-key=$HEROKU_KEY
  environment:
    name: Production
    url: https://covid19sg.itachi1706.com/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: manual
    - when: never
